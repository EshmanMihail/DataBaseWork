// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelsLibrary.Models;

#nullable disable

namespace ProgramASP.Migrations
{
    [DbContext(typeof(HeatSchemeStorageContext))]
    [Migration("20231225035546_IdentityImport")]
    partial class IdentityImport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.Enterprise", b =>
                {
                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int")
                        .HasColumnName("EnterpriseID");

                    b.Property<string>("EnterpriseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManagementOrganization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EnterpriseId")
                        .HasName("PK__Enterpri__52DEA5462ED0C064");

                    b.ToTable("Enterprise", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatConsumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<decimal?>("CalculatedPower")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ConsumerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int")
                        .HasColumnName("NetworkID");

                    b.Property<int?>("NodeNumber")
                        .HasColumnType("int");

                    b.HasKey("ConsumerId")
                        .HasName("PK__HeatCons__63BBE99A4A9E83E8");

                    b.HasIndex("NetworkId");

                    b.ToTable("HeatConsumer", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatNetwork", b =>
                {
                    b.Property<int>("NetworkId")
                        .HasColumnType("int")
                        .HasColumnName("NetworkID");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int")
                        .HasColumnName("EnterpriseID");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NetworkNumber")
                        .HasColumnType("int");

                    b.Property<string>("NetworkType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NetworkId")
                        .HasName("PK__HeatNetw__4DD57BEB08CF76F4");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("HeatNetwork", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatPoint", b =>
                {
                    b.Property<int>("PointId")
                        .HasColumnType("int")
                        .HasColumnName("PointID");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int")
                        .HasColumnName("NetworkID");

                    b.Property<int?>("NodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("PointName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PointId")
                        .HasName("PK__HeatPoin__40A9778192CC5EF2");

                    b.HasIndex("NetworkId");

                    b.ToTable("HeatPoint", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatWell", b =>
                {
                    b.Property<int>("WellId")
                        .HasColumnType("int")
                        .HasColumnName("WellID");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int")
                        .HasColumnName("NetworkID");

                    b.Property<int?>("NodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("WellName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WellId")
                        .HasName("PK__HeatWell__E955CC1C4EA60E2D");

                    b.HasIndex("NetworkId");

                    b.ToTable("HeatWell", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.PipelineSection", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("EndNodeNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("LastRepairDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PipelineLength")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("SectionNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StartNodeNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("SectionId")
                        .HasName("PK__Pipeline__80EF08922EA94606");

                    b.HasIndex("EndNodeNumber");

                    b.HasIndex("StartNodeNumber");

                    b.ToTable("PipelineSection", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.SteelPipe", b =>
                {
                    b.Property<int>("PipeId")
                        .HasColumnType("int")
                        .HasColumnName("PipeID");

                    b.Property<decimal?>("LinearInternalVolume")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("LinearWeight")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("OuterDiameter")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("PipeId")
                        .HasName("PK__SteelPip__30B4C3BD5E09EAE6");

                    b.ToTable("SteelPipe", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Views.ViewHeatConsumer", b =>
                {
                    b.Property<decimal?>("CalculatedPower")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<string>("ConsumerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NodeNumber")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ViewHeatConsumers", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Views.ViewHeatNetwork", b =>
                {
                    b.Property<string>("EnterpriseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int")
                        .HasColumnName("NetworkID");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NetworkNumber")
                        .HasColumnType("int");

                    b.Property<string>("NetworkType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable((string)null);

                    b.ToView("ViewHeatNetworks", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Views.ViewHeatPoint", b =>
                {
                    b.Property<string>("NetworkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NodeNumber")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int")
                        .HasColumnName("PointID");

                    b.Property<string>("PointName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("ViewHeatPoints", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Views.ViewPipelineSection", b =>
                {
                    b.Property<decimal?>("Diameter")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("EndNode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastRepairDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PipelineLength")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<int?>("SectionNumber")
                        .HasColumnType("int");

                    b.Property<string>("StartNode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("decimal(18, 0)");

                    b.ToTable((string)null);

                    b.ToView("ViewPipelineSections", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatConsumer", b =>
                {
                    b.HasOne("ModelsLibrary.Models.HeatNetwork", "Network")
                        .WithMany("HeatConsumers")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK__HeatConsu__Netwo__45F365D3");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatNetwork", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Enterprise", "Enterprise")
                        .WithMany("HeatNetworks")
                        .HasForeignKey("EnterpriseId")
                        .HasConstraintName("FK__HeatNetwo__Enter__4316F928");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatPoint", b =>
                {
                    b.HasOne("ModelsLibrary.Models.HeatNetwork", "Network")
                        .WithMany("HeatPoints")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK__HeatPoint__Netwo__440B1D61");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatWell", b =>
                {
                    b.HasOne("ModelsLibrary.Models.HeatNetwork", "Network")
                        .WithMany("HeatWells")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK__HeatWell__Networ__44FF419A");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("ModelsLibrary.Models.PipelineSection", b =>
                {
                    b.HasOne("ModelsLibrary.Models.HeatPoint", "EndNodeNumberNavigation")
                        .WithMany("PipelineSectionEndNodeNumberNavigations")
                        .HasForeignKey("EndNodeNumber")
                        .HasConstraintName("FK__PipelineS__EndNo__47DBAE45");

                    b.HasOne("ModelsLibrary.Models.HeatPoint", "StartNodeNumberNavigation")
                        .WithMany("PipelineSectionStartNodeNumberNavigations")
                        .HasForeignKey("StartNodeNumber")
                        .HasConstraintName("FK__PipelineS__Start__46E78A0C");

                    b.Navigation("EndNodeNumberNavigation");

                    b.Navigation("StartNodeNumberNavigation");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Enterprise", b =>
                {
                    b.Navigation("HeatNetworks");
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatNetwork", b =>
                {
                    b.Navigation("HeatConsumers");

                    b.Navigation("HeatPoints");

                    b.Navigation("HeatWells");
                });

            modelBuilder.Entity("ModelsLibrary.Models.HeatPoint", b =>
                {
                    b.Navigation("PipelineSectionEndNodeNumberNavigations");

                    b.Navigation("PipelineSectionStartNodeNumberNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
